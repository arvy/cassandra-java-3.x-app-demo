/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cassandra.java.app.demo;


import com.datastax.driver.core.*;
import com.datastax.driver.core.policies.ConstantSpeculativeExecutionPolicy;
import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;
import com.datastax.driver.core.policies.LoggingRetryPolicy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Random;


public class App {
    public static final Logger logger = LoggerFactory.getLogger(App.class.getName());
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {


        Cluster cluster = null;
        try {
            cluster = Cluster.builder()                                                    // (1)
//                    .addContactPoint("10.101.33.222")
//                    .addContactPoint("10.101.34.187")
                    .addContactPoint("10.101.32.185")
                    .withCredentials("cassandra", "cassandra").withPort(9043)

//                    .withLoadBalancingPolicy(DCAwareRoundRobinPolicy.builder().withLocalDc("DC1").build())
//                    .withSocketOptions(new SocketOptions().setReadTimeoutMillis(200))
//                    .withRetryPolicy(new LoggingRetryPolicy(new ArvyRetryPolicy()))
//                    .withSpeculativeExecutionPolicy(new ConstantSpeculativeExecutionPolicy(2, 1))
                    .build();
            Session session = cluster.connect();                                           // (2)


//            statement.set
//            statement.enableTracing();
            Random rand = new Random();

            while (true) {
                PreparedStatement ps = session.prepare("select * from keyspace1.standard1 LIMIT 1000");
                ResultSet rs = session.execute(ps.bind());    // (3)
                //            for(ExecutionInfo ei : rs.getAllExecutionInfo()){
                //                QueryTrace queryTrace = ei.getQueryTrace();
                //                logger.info("host: {}, achievedCL: {}, queryTrace: {}", ei.getQueriedHost(), ei.getAchievedConsistencyLevel(), queryTrace.toString());
                //                for(QueryTrace.Event event :queryTrace.getEvents()){
                //                    logger.info("Description={}, Source={}, SourceElapsedTimeInMicros={}", event.getDescription(), event.getSource(), event.getSourceElapsedMicros());
                //                }
                //            }
                logger.info("Coordinator: {}", rs.getExecutionInfo().getQueriedHost().toString());
                logger.info("Tried hosts: {}", rs.getExecutionInfo().getTriedHosts());
//                Row row = rs.one();
//                logger.info(row.getBytes("key").toString());                          // (4)
            }
        }catch (Exception e){
            logger.error("Exception caught", e);
        } finally {
            if (cluster != null) cluster.close();                                          // (5)
        }


    }
}
